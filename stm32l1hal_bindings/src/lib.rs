#![no_std]
/* automatically generated by rust-bindgen */

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum IRQn_Type {
    NonMaskableInt_IRQn = -14,
    HardFault_IRQn = -13,
    MemoryManagement_IRQn = -12,
    BusFault_IRQn = -11,
    UsageFault_IRQn = -10,
    SVC_IRQn = -5,
    DebugMonitor_IRQn = -4,
    PendSV_IRQn = -2,
    SysTick_IRQn = -1,
    WWDG_IRQn = 0,
    PVD_IRQn = 1,
    TAMPER_STAMP_IRQn = 2,
    RTC_WKUP_IRQn = 3,
    FLASH_IRQn = 4,
    RCC_IRQn = 5,
    EXTI0_IRQn = 6,
    EXTI1_IRQn = 7,
    EXTI2_IRQn = 8,
    EXTI3_IRQn = 9,
    EXTI4_IRQn = 10,
    DMA1_Channel1_IRQn = 11,
    DMA1_Channel2_IRQn = 12,
    DMA1_Channel3_IRQn = 13,
    DMA1_Channel4_IRQn = 14,
    DMA1_Channel5_IRQn = 15,
    DMA1_Channel6_IRQn = 16,
    DMA1_Channel7_IRQn = 17,
    ADC1_IRQn = 18,
    USB_HP_IRQn = 19,
    USB_LP_IRQn = 20,
    DAC_IRQn = 21,
    COMP_IRQn = 22,
    EXTI9_5_IRQn = 23,
    LCD_IRQn = 24,
    TIM9_IRQn = 25,
    TIM10_IRQn = 26,
    TIM11_IRQn = 27,
    TIM2_IRQn = 28,
    TIM3_IRQn = 29,
    TIM4_IRQn = 30,
    I2C1_EV_IRQn = 31,
    I2C1_ER_IRQn = 32,
    I2C2_EV_IRQn = 33,
    I2C2_ER_IRQn = 34,
    SPI1_IRQn = 35,
    SPI2_IRQn = 36,
    USART1_IRQn = 37,
    USART2_IRQn = 38,
    USART3_IRQn = 39,
    EXTI15_10_IRQn = 40,
    RTC_Alarm_IRQn = 41,
    USB_FS_WKUP_IRQn = 42,
    TIM6_IRQn = 43,
    TIM7_IRQn = 44,
}

pub type int8_t = i8;
pub type uint8_t = u8;
pub type int16_t = i16;
pub type uint16_t = u16;
pub type int32_t = i32;
pub type uint32_t = u32;
pub type int64_t = i64;
pub type uint64_t = u64;
pub type intptr_t = isize;
pub type uintptr_t = usize;

pub enum c_void {
    // some variants omitted
}

#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct APSR_Type {
    pub _bindgen_data_: [u32; 1usize],
}
impl APSR_Type {
    pub unsafe fn b(&mut self) -> *mut Struct_Unnamed1 {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn w(&mut self) -> *mut uint32_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
}
impl ::core::default::Default for APSR_Type {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed1 {
    pub _bindgen_bitfield_1_: uint32_t,
    pub _bindgen_bitfield_2_: uint32_t,
    pub _bindgen_bitfield_3_: uint32_t,
    pub _bindgen_bitfield_4_: uint32_t,
    pub _bindgen_bitfield_5_: uint32_t,
    pub _bindgen_bitfield_6_: uint32_t,
}
impl ::core::default::Default for Struct_Unnamed1 {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct IPSR_Type {
    pub _bindgen_data_: [u32; 1usize],
}
impl IPSR_Type {
    pub unsafe fn b(&mut self) -> *mut Struct_Unnamed2 {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn w(&mut self) -> *mut uint32_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
}
impl ::core::default::Default for IPSR_Type {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed2 {
    pub _bindgen_bitfield_1_: uint32_t,
    pub _bindgen_bitfield_2_: uint32_t,
}
impl ::core::default::Default for Struct_Unnamed2 {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct xPSR_Type {
    pub _bindgen_data_: [u32; 1usize],
}
impl xPSR_Type {
    pub unsafe fn b(&mut self) -> *mut Struct_Unnamed3 {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn w(&mut self) -> *mut uint32_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
}
impl ::core::default::Default for xPSR_Type {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed3 {
    pub _bindgen_bitfield_1_: uint32_t,
    pub _bindgen_bitfield_2_: uint32_t,
    pub _bindgen_bitfield_3_: uint32_t,
    pub _bindgen_bitfield_4_: uint32_t,
    pub _bindgen_bitfield_5_: uint32_t,
    pub _bindgen_bitfield_6_: uint32_t,
    pub _bindgen_bitfield_7_: uint32_t,
    pub _bindgen_bitfield_8_: uint32_t,
    pub _bindgen_bitfield_9_: uint32_t,
}
impl ::core::default::Default for Struct_Unnamed3 {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CONTROL_Type {
    pub _bindgen_data_: [u32; 1usize],
}
impl CONTROL_Type {
    pub unsafe fn b(&mut self) -> *mut Struct_Unnamed4 {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn w(&mut self) -> *mut uint32_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
}
impl ::core::default::Default for CONTROL_Type {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed4 {
    pub _bindgen_bitfield_1_: uint32_t,
    pub _bindgen_bitfield_2_: uint32_t,
    pub _bindgen_bitfield_3_: uint32_t,
}
impl ::core::default::Default for Struct_Unnamed4 {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct NVIC_Type {
    pub ISER: [uint32_t; 8usize],
    pub RESERVED0: [uint32_t; 24usize],
    pub ICER: [uint32_t; 8usize],
    pub RSERVED1: [uint32_t; 24usize],
    pub ISPR: [uint32_t; 8usize],
    pub RESERVED2: [uint32_t; 24usize],
    pub ICPR: [uint32_t; 8usize],
    pub RESERVED3: [uint32_t; 24usize],
    pub IABR: [uint32_t; 8usize],
    pub RESERVED4: [uint32_t; 56usize],
    pub IP: [uint8_t; 240usize],
    pub RESERVED5: [uint32_t; 644usize],
    pub STIR: uint32_t,
}
impl ::core::clone::Clone for NVIC_Type {
    fn clone(&self) -> Self { *self }
}
impl ::core::default::Default for NVIC_Type {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SCB_Type {
    pub CPUID: uint32_t,
    pub ICSR: uint32_t,
    pub VTOR: uint32_t,
    pub AIRCR: uint32_t,
    pub SCR: uint32_t,
    pub CCR: uint32_t,
    pub SHP: [uint8_t; 12usize],
    pub SHCSR: uint32_t,
    pub CFSR: uint32_t,
    pub HFSR: uint32_t,
    pub DFSR: uint32_t,
    pub MMFAR: uint32_t,
    pub BFAR: uint32_t,
    pub AFSR: uint32_t,
    pub PFR: [uint32_t; 2usize],
    pub DFR: uint32_t,
    pub ADR: uint32_t,
    pub MMFR: [uint32_t; 4usize],
    pub ISAR: [uint32_t; 5usize],
    pub RESERVED0: [uint32_t; 5usize],
    pub CPACR: uint32_t,
}
impl ::core::default::Default for SCB_Type {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SCnSCB_Type {
    pub RESERVED0: [uint32_t; 1usize],
    pub ICTR: uint32_t,
    pub ACTLR: uint32_t,
}
impl ::core::default::Default for SCnSCB_Type {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SysTick_Type {
    pub CTRL: uint32_t,
    pub LOAD: uint32_t,
    pub VAL: uint32_t,
    pub CALIB: uint32_t,
}
impl ::core::default::Default for SysTick_Type {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct ITM_Type {
    pub PORT: [Union_Unnamed5; 32usize],
    pub RESERVED0: [uint32_t; 864usize],
    pub TER: uint32_t,
    pub RESERVED1: [uint32_t; 15usize],
    pub TPR: uint32_t,
    pub RESERVED2: [uint32_t; 15usize],
    pub TCR: uint32_t,
    pub RESERVED3: [uint32_t; 29usize],
    pub IWR: uint32_t,
    pub IRR: uint32_t,
    pub IMCR: uint32_t,
    pub RESERVED4: [uint32_t; 43usize],
    pub LAR: uint32_t,
    pub LSR: uint32_t,
    pub RESERVED5: [uint32_t; 6usize],
    pub PID4: uint32_t,
    pub PID5: uint32_t,
    pub PID6: uint32_t,
    pub PID7: uint32_t,
    pub PID0: uint32_t,
    pub PID1: uint32_t,
    pub PID2: uint32_t,
    pub PID3: uint32_t,
    pub CID0: uint32_t,
    pub CID1: uint32_t,
    pub CID2: uint32_t,
    pub CID3: uint32_t,
}
impl ::core::clone::Clone for ITM_Type {
    fn clone(&self) -> Self { *self }
}
impl ::core::default::Default for ITM_Type {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed5 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed5 {
    pub unsafe fn u8_(&mut self) -> *mut uint8_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn u16_(&mut self) -> *mut uint16_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn u32_(&mut self) -> *mut uint32_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
}
impl ::core::default::Default for Union_Unnamed5 {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct DWT_Type {
    pub CTRL: uint32_t,
    pub CYCCNT: uint32_t,
    pub CPICNT: uint32_t,
    pub EXCCNT: uint32_t,
    pub SLEEPCNT: uint32_t,
    pub LSUCNT: uint32_t,
    pub FOLDCNT: uint32_t,
    pub PCSR: uint32_t,
    pub COMP0: uint32_t,
    pub MASK0: uint32_t,
    pub FUNCTION0: uint32_t,
    pub RESERVED0: [uint32_t; 1usize],
    pub COMP1: uint32_t,
    pub MASK1: uint32_t,
    pub FUNCTION1: uint32_t,
    pub RESERVED1: [uint32_t; 1usize],
    pub COMP2: uint32_t,
    pub MASK2: uint32_t,
    pub FUNCTION2: uint32_t,
    pub RESERVED2: [uint32_t; 1usize],
    pub COMP3: uint32_t,
    pub MASK3: uint32_t,
    pub FUNCTION3: uint32_t,
}
impl ::core::default::Default for DWT_Type {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct TPI_Type {
    pub SSPSR: uint32_t,
    pub CSPSR: uint32_t,
    pub RESERVED0: [uint32_t; 2usize],
    pub ACPR: uint32_t,
    pub RESERVED1: [uint32_t; 55usize],
    pub SPPR: uint32_t,
    pub RESERVED2: [uint32_t; 131usize],
    pub FFSR: uint32_t,
    pub FFCR: uint32_t,
    pub FSCR: uint32_t,
    pub RESERVED3: [uint32_t; 759usize],
    pub TRIGGER: uint32_t,
    pub FIFO0: uint32_t,
    pub ITATBCTR2: uint32_t,
    pub RESERVED4: [uint32_t; 1usize],
    pub ITATBCTR0: uint32_t,
    pub FIFO1: uint32_t,
    pub ITCTRL: uint32_t,
    pub RESERVED5: [uint32_t; 39usize],
    pub CLAIMSET: uint32_t,
    pub CLAIMCLR: uint32_t,
    pub RESERVED7: [uint32_t; 8usize],
    pub DEVID: uint32_t,
    pub DEVTYPE: uint32_t,
}
impl ::core::clone::Clone for TPI_Type {
    fn clone(&self) -> Self { *self }
}
impl ::core::default::Default for TPI_Type {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct MPU_Type {
    pub TYPE: uint32_t,
    pub CTRL: uint32_t,
    pub RNR: uint32_t,
    pub RBAR: uint32_t,
    pub RASR: uint32_t,
    pub RBAR_A1: uint32_t,
    pub RASR_A1: uint32_t,
    pub RBAR_A2: uint32_t,
    pub RASR_A2: uint32_t,
    pub RBAR_A3: uint32_t,
    pub RASR_A3: uint32_t,
}
impl ::core::default::Default for MPU_Type {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CoreDebug_Type {
    pub DHCSR: uint32_t,
    pub DCRSR: uint32_t,
    pub DCRDR: uint32_t,
    pub DEMCR: uint32_t,
}
impl ::core::default::Default for CoreDebug_Type {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ADC_TypeDef {
    pub SR: uint32_t,
    pub CR1: uint32_t,
    pub CR2: uint32_t,
    pub SMPR1: uint32_t,
    pub SMPR2: uint32_t,
    pub SMPR3: uint32_t,
    pub JOFR1: uint32_t,
    pub JOFR2: uint32_t,
    pub JOFR3: uint32_t,
    pub JOFR4: uint32_t,
    pub HTR: uint32_t,
    pub LTR: uint32_t,
    pub SQR1: uint32_t,
    pub SQR2: uint32_t,
    pub SQR3: uint32_t,
    pub SQR4: uint32_t,
    pub SQR5: uint32_t,
    pub JSQR: uint32_t,
    pub JDR1: uint32_t,
    pub JDR2: uint32_t,
    pub JDR3: uint32_t,
    pub JDR4: uint32_t,
    pub DR: uint32_t,
    pub RESERVED: uint32_t,
}
impl ::core::default::Default for ADC_TypeDef {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ADC_Common_TypeDef {
    pub CSR: uint32_t,
    pub CCR: uint32_t,
}
impl ::core::default::Default for ADC_Common_TypeDef {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct COMP_TypeDef {
    pub CSR: uint32_t,
}
impl ::core::default::Default for COMP_TypeDef {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CRC_TypeDef {
    pub DR: uint32_t,
    pub IDR: uint8_t,
    pub RESERVED0: uint8_t,
    pub RESERVED1: uint16_t,
    pub CR: uint32_t,
}
impl ::core::default::Default for CRC_TypeDef {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct DAC_TypeDef {
    pub CR: uint32_t,
    pub SWTRIGR: uint32_t,
    pub DHR12R1: uint32_t,
    pub DHR12L1: uint32_t,
    pub DHR8R1: uint32_t,
    pub DHR12R2: uint32_t,
    pub DHR12L2: uint32_t,
    pub DHR8R2: uint32_t,
    pub DHR12RD: uint32_t,
    pub DHR12LD: uint32_t,
    pub DHR8RD: uint32_t,
    pub DOR1: uint32_t,
    pub DOR2: uint32_t,
    pub SR: uint32_t,
}
impl ::core::default::Default for DAC_TypeDef {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct DBGMCU_TypeDef {
    pub IDCODE: uint32_t,
    pub CR: uint32_t,
    pub APB1FZ: uint32_t,
    pub APB2FZ: uint32_t,
}
impl ::core::default::Default for DBGMCU_TypeDef {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct DMA_Channel_TypeDef {
    pub CCR: uint32_t,
    pub CNDTR: uint32_t,
    pub CPAR: uint32_t,
    pub CMAR: uint32_t,
}
impl ::core::default::Default for DMA_Channel_TypeDef {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct DMA_TypeDef {
    pub ISR: uint32_t,
    pub IFCR: uint32_t,
}
impl ::core::default::Default for DMA_TypeDef {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct EXTI_TypeDef {
    pub IMR: uint32_t,
    pub EMR: uint32_t,
    pub RTSR: uint32_t,
    pub FTSR: uint32_t,
    pub SWIER: uint32_t,
    pub PR: uint32_t,
}
impl ::core::default::Default for EXTI_TypeDef {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct FLASH_TypeDef {
    pub ACR: uint32_t,
    pub PECR: uint32_t,
    pub PDKEYR: uint32_t,
    pub PEKEYR: uint32_t,
    pub PRGKEYR: uint32_t,
    pub OPTKEYR: uint32_t,
    pub SR: uint32_t,
    pub OBR: uint32_t,
    pub WRPR1: uint32_t,
}
impl ::core::default::Default for FLASH_TypeDef {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct OB_TypeDef {
    pub RDP: uint32_t,
    pub USER: uint32_t,
    pub WRP01: uint32_t,
    pub WRP23: uint32_t,
}
impl ::core::default::Default for OB_TypeDef {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct GPIO_TypeDef {
    pub MODER: uint32_t,
    pub OTYPER: uint32_t,
    pub OSPEEDR: uint32_t,
    pub PUPDR: uint32_t,
    pub IDR: uint32_t,
    pub ODR: uint32_t,
    pub BSRR: uint32_t,
    pub LCKR: uint32_t,
    pub AFR: [uint32_t; 2usize],
}
impl ::core::default::Default for GPIO_TypeDef {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SYSCFG_TypeDef {
    pub MEMRMP: uint32_t,
    pub PMC: uint32_t,
    pub EXTICR: [uint32_t; 4usize],
}
impl ::core::default::Default for SYSCFG_TypeDef {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct I2C_TypeDef {
    pub CR1: uint32_t,
    pub CR2: uint32_t,
    pub OAR1: uint32_t,
    pub OAR2: uint32_t,
    pub DR: uint32_t,
    pub SR1: uint32_t,
    pub SR2: uint32_t,
    pub CCR: uint32_t,
    pub TRISE: uint32_t,
}
impl ::core::default::Default for I2C_TypeDef {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct IWDG_TypeDef {
    pub KR: uint32_t,
    pub PR: uint32_t,
    pub RLR: uint32_t,
    pub SR: uint32_t,
}
impl ::core::default::Default for IWDG_TypeDef {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct LCD_TypeDef {
    pub CR: uint32_t,
    pub FCR: uint32_t,
    pub SR: uint32_t,
    pub CLR: uint32_t,
    pub RESERVED: uint32_t,
    pub RAM: [uint32_t; 16usize],
}
impl ::core::default::Default for LCD_TypeDef {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PWR_TypeDef {
    pub CR: uint32_t,
    pub CSR: uint32_t,
}
impl ::core::default::Default for PWR_TypeDef {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct RCC_TypeDef {
    pub CR: uint32_t,
    pub ICSCR: uint32_t,
    pub CFGR: uint32_t,
    pub CIR: uint32_t,
    pub AHBRSTR: uint32_t,
    pub APB2RSTR: uint32_t,
    pub APB1RSTR: uint32_t,
    pub AHBENR: uint32_t,
    pub APB2ENR: uint32_t,
    pub APB1ENR: uint32_t,
    pub AHBLPENR: uint32_t,
    pub APB2LPENR: uint32_t,
    pub APB1LPENR: uint32_t,
    pub CSR: uint32_t,
}
impl ::core::default::Default for RCC_TypeDef {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct RI_TypeDef {
    pub ICR: uint32_t,
    pub ASCR1: uint32_t,
    pub ASCR2: uint32_t,
    pub HYSCR1: uint32_t,
    pub HYSCR2: uint32_t,
    pub HYSCR3: uint32_t,
}
impl ::core::default::Default for RI_TypeDef {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct RTC_TypeDef {
    pub TR: uint32_t,
    pub DR: uint32_t,
    pub CR: uint32_t,
    pub ISR: uint32_t,
    pub PRER: uint32_t,
    pub WUTR: uint32_t,
    pub CALIBR: uint32_t,
    pub ALRMAR: uint32_t,
    pub ALRMBR: uint32_t,
    pub WPR: uint32_t,
    pub RESERVED1: uint32_t,
    pub RESERVED2: uint32_t,
    pub TSTR: uint32_t,
    pub TSDR: uint32_t,
    pub RESERVED3: uint32_t,
    pub RESERVED4: uint32_t,
    pub TAFCR: uint32_t,
    pub RESERVED5: uint32_t,
    pub RESERVED6: uint32_t,
    pub RESERVED7: uint32_t,
    pub BKP0R: uint32_t,
    pub BKP1R: uint32_t,
    pub BKP2R: uint32_t,
    pub BKP3R: uint32_t,
    pub BKP4R: uint32_t,
    pub BKP5R: uint32_t,
    pub BKP6R: uint32_t,
    pub BKP7R: uint32_t,
    pub BKP8R: uint32_t,
    pub BKP9R: uint32_t,
    pub BKP10R: uint32_t,
    pub BKP11R: uint32_t,
    pub BKP12R: uint32_t,
    pub BKP13R: uint32_t,
    pub BKP14R: uint32_t,
    pub BKP15R: uint32_t,
    pub BKP16R: uint32_t,
    pub BKP17R: uint32_t,
    pub BKP18R: uint32_t,
    pub BKP19R: uint32_t,
}
impl ::core::default::Default for RTC_TypeDef {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SPI_TypeDef {
    pub CR1: uint32_t,
    pub CR2: uint32_t,
    pub SR: uint32_t,
    pub DR: uint32_t,
    pub CRCPR: uint32_t,
    pub RXCRCR: uint32_t,
    pub TXCRCR: uint32_t,
}
impl ::core::default::Default for SPI_TypeDef {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct TIM_TypeDef {
    pub CR1: uint32_t,
    pub CR2: uint32_t,
    pub SMCR: uint32_t,
    pub DIER: uint32_t,
    pub SR: uint32_t,
    pub EGR: uint32_t,
    pub CCMR1: uint32_t,
    pub CCMR2: uint32_t,
    pub CCER: uint32_t,
    pub CNT: uint32_t,
    pub PSC: uint32_t,
    pub ARR: uint32_t,
    pub RESERVED12: uint32_t,
    pub CCR1: uint32_t,
    pub CCR2: uint32_t,
    pub CCR3: uint32_t,
    pub CCR4: uint32_t,
    pub RESERVED17: uint32_t,
    pub DCR: uint32_t,
    pub DMAR: uint32_t,
    pub OR: uint32_t,
}
impl ::core::default::Default for TIM_TypeDef {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct USART_TypeDef {
    pub SR: uint32_t,
    pub DR: uint32_t,
    pub BRR: uint32_t,
    pub CR1: uint32_t,
    pub CR2: uint32_t,
    pub CR3: uint32_t,
    pub GTPR: uint32_t,
}
impl ::core::default::Default for USART_TypeDef {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct USB_TypeDef {
    pub EP0R: uint16_t,
    pub RESERVED0: uint16_t,
    pub EP1R: uint16_t,
    pub RESERVED1: uint16_t,
    pub EP2R: uint16_t,
    pub RESERVED2: uint16_t,
    pub EP3R: uint16_t,
    pub RESERVED3: uint16_t,
    pub EP4R: uint16_t,
    pub RESERVED4: uint16_t,
    pub EP5R: uint16_t,
    pub RESERVED5: uint16_t,
    pub EP6R: uint16_t,
    pub RESERVED6: uint16_t,
    pub EP7R: uint16_t,
    pub RESERVED7: [uint16_t; 17usize],
    pub CNTR: uint16_t,
    pub RESERVED8: uint16_t,
    pub ISTR: uint16_t,
    pub RESERVED9: uint16_t,
    pub FNR: uint16_t,
    pub RESERVEDA: uint16_t,
    pub DADDR: uint16_t,
    pub RESERVEDB: uint16_t,
    pub BTABLE: uint16_t,
    pub RESERVEDC: uint16_t,
}
impl ::core::default::Default for USB_TypeDef {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct WWDG_TypeDef {
    pub CR: uint32_t,
    pub CFR: uint32_t,
    pub SR: uint32_t,
}
impl ::core::default::Default for WWDG_TypeDef {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum FlagStatus { RESET = 0, SET = 1, }
pub type ITStatus = FlagStatus;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum FunctionalState { DISABLE = 0, ENABLE = 1, }
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum ErrorStatus { ERROR = 0, SUCCESS = 1, }
pub type size_t = usize;
pub type ptrdiff_t = isize;
pub type wchar_t = uint32_t;
pub type _LOCK_T = int32_t;
pub type _LOCK_RECURSIVE_T = int32_t;
pub type _off_t = int32_t;
pub type __dev_t = int16_t;
pub type __uid_t = uint16_t;
pub type __gid_t = uint16_t;
pub type _off64_t = int64_t;
pub type _fpos_t = int32_t;
pub type _ssize_t = int32_t;
pub type wint_t = int32_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _mbstate_t {
    pub __count: int32_t,
    pub __value: Union_Unnamed6,
}
impl ::core::default::Default for _mbstate_t {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed6 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed6 {
    pub unsafe fn __wch(&mut self) -> *mut wint_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __wchb(&mut self)
     -> *mut [uint8_t; 4usize] {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
}
impl ::core::default::Default for Union_Unnamed6 {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
pub type _flock_t = _LOCK_RECURSIVE_T;
pub type _iconv_t = *mut c_void;
pub type __ULong = uint32_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _Bigint {
    pub _next: *mut _Bigint,
    pub _k: int32_t,
    pub _maxwds: int32_t,
    pub _sign: int32_t,
    pub _wds: int32_t,
    pub _x: [__ULong; 1usize],
}
impl ::core::default::Default for _Bigint {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __tm {
    pub __tm_sec: int32_t,
    pub __tm_min: int32_t,
    pub __tm_hour: int32_t,
    pub __tm_mday: int32_t,
    pub __tm_mon: int32_t,
    pub __tm_year: int32_t,
    pub __tm_wday: int32_t,
    pub __tm_yday: int32_t,
    pub __tm_isdst: int32_t,
}
impl ::core::default::Default for __tm {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _on_exit_args {
    pub _fnargs: [*mut c_void; 32usize],
    pub _dso_handle: [*mut c_void; 32usize],
    pub _fntypes: __ULong,
    pub _is_cxa: __ULong,
}
impl ::core::default::Default for _on_exit_args {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _atexit {
    pub _next: *mut _atexit,
    pub _ind: int32_t,
    pub _fns: [::core::option::Option<extern "C" fn()>; 32usize],
    pub _on_exit_args: _on_exit_args,
}
impl ::core::default::Default for _atexit {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __sbuf {
    pub _base: *mut uint8_t,
    pub _size: int32_t,
}
impl ::core::default::Default for __sbuf {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __sFILE {
    pub _p: *mut uint8_t,
    pub _r: int32_t,
    pub _w: int32_t,
    pub _flags: int16_t,
    pub _file: int16_t,
    pub _bf: __sbuf,
    pub _lbfsize: int32_t,
    pub _cookie: *mut c_void,
    pub _read: ::core::option::Option<unsafe extern "C" fn(arg1: *mut _reent,
                                                           arg2:
                                                               *mut c_void,
                                                           arg3:
                                                               *mut uint8_t,
                                                           arg4:
                                                               int32_t)
                                          -> int32_t>,
    pub _write: ::core::option::Option<unsafe extern "C" fn(arg1: *mut _reent,
                                                            arg2:
                                                                *mut c_void,
                                                            arg3:
                                                                *const uint8_t,
                                                            arg4:
                                                                int32_t)
                                           -> int32_t>,
    pub _seek: ::core::option::Option<unsafe extern "C" fn(arg1: *mut _reent,
                                                           arg2:
                                                               *mut c_void,
                                                           arg3: _fpos_t,
                                                           arg4:
                                                               int32_t)
                                          -> _fpos_t>,
    pub _close: ::core::option::Option<unsafe extern "C" fn(arg1: *mut _reent,
                                                            arg2:
                                                                *mut c_void)
                                           -> int32_t>,
    pub _ub: __sbuf,
    pub _up: *mut uint8_t,
    pub _ur: int32_t,
    pub _ubuf: [uint8_t; 3usize],
    pub _nbuf: [uint8_t; 1usize],
    pub _lb: __sbuf,
    pub _blksize: int32_t,
    pub _offset: _off_t,
    pub _data: *mut _reent,
    pub _lock: _flock_t,
    pub _mbstate: _mbstate_t,
    pub _flags2: int32_t,
}
impl ::core::default::Default for __sFILE {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
pub type __FILE = __sFILE;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _glue {
    pub _next: *mut _glue,
    pub _niobs: int32_t,
    pub _iobs: *mut __FILE,
}
impl ::core::default::Default for _glue {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _rand48 {
    pub _seed: [uint16_t; 3usize],
    pub _mult: [uint16_t; 3usize],
    pub _add: uint16_t,
}
impl ::core::default::Default for _rand48 {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _reent {
    pub _errno: int32_t,
    pub _stdin: *mut __FILE,
    pub _stdout: *mut __FILE,
    pub _stderr: *mut __FILE,
    pub _inc: int32_t,
    pub _emergency: [uint8_t; 25usize],
    pub _current_category: int32_t,
    pub _current_locale: *const uint8_t,
    pub __sdidinit: int32_t,
    pub __cleanup: ::core::option::Option<unsafe extern "C" fn(arg1:
                                                                   *mut _reent)>,
    pub _result: *mut _Bigint,
    pub _result_k: int32_t,
    pub _p5s: *mut _Bigint,
    pub _freelist: *mut *mut _Bigint,
    pub _cvtlen: int32_t,
    pub _cvtbuf: *mut uint8_t,
    pub _new: Union_Unnamed7,
    pub _atexit: *mut _atexit,
    pub _atexit0: _atexit,
    pub _sig_func: uint8_t,
    pub __sglue: _glue,
    pub __sf: [__FILE; 3usize],
}
impl ::core::default::Default for _reent {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed7 {
    pub _bindgen_data_: [u64; 30usize],
}
impl Union_Unnamed7 {
    pub unsafe fn _reent(&mut self) -> *mut Struct_Unnamed8 {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _unused(&mut self) -> *mut Struct_Unnamed9 {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
}
impl ::core::default::Default for Union_Unnamed7 {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed8 {
    pub _unused_rand: uint32_t,
    pub _strtok_last: *mut uint8_t,
    pub _asctime_buf: [uint8_t; 26usize],
    pub _localtime_buf: __tm,
    pub _gamma_signgam: int32_t,
    pub _rand_next: uint64_t,
    pub _r48: _rand48,
    pub _mblen_state: _mbstate_t,
    pub _mbtowc_state: _mbstate_t,
    pub _wctomb_state: _mbstate_t,
    pub _l64a_buf: [uint8_t; 8usize],
    pub _signal_buf: [uint8_t; 24usize],
    pub _getdate_err: int32_t,
    pub _mbrlen_state: _mbstate_t,
    pub _mbrtowc_state: _mbstate_t,
    pub _mbsrtowcs_state: _mbstate_t,
    pub _wcrtomb_state: _mbstate_t,
    pub _wcsrtombs_state: _mbstate_t,
    pub _h_errno: int32_t,
}
impl ::core::default::Default for Struct_Unnamed8 {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed9 {
    pub _nextf: [*mut uint8_t; 30usize],
    pub _nmalloc: [uint32_t; 30usize],
}
impl ::core::default::Default for Struct_Unnamed9 {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}

pub type __off_t = int32_t;
pub type __pid_t = int32_t;
pub type __loff_t = int64_t;
pub type __suseconds_t = int32_t;
pub type clock_t = uint32_t;
pub type time_t = int32_t;
pub type daddr_t = int32_t;
pub type caddr_t = *mut uint8_t;
pub type ino_t = uint16_t;
pub type off_t = _off_t;
pub type dev_t = __dev_t;
pub type uid_t = __uid_t;
pub type gid_t = __gid_t;
pub type pid_t = int32_t;
pub type key_t = int32_t;
pub type ssize_t = isize;
pub type mode_t = uint32_t;
pub type nlink_t = uint16_t;
pub type clockid_t = uint32_t;
pub type timer_t = uint32_t;
pub type useconds_t = uint32_t;
pub type suseconds_t = __suseconds_t;
pub type FILE = __FILE;
pub type fpos_t = _fpos_t;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum HAL_StatusTypeDef {
    HAL_OK = 0,
    HAL_ERROR = 1,
    HAL_BUSY = 2,
    HAL_TIMEOUT = 3,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum HAL_LockTypeDef { HAL_UNLOCKED = 0, HAL_LOCKED = 1, }
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct RCC_PLLInitTypeDef {
    pub PLLState: uint32_t,
    pub PLLSource: uint32_t,
    pub PLLMUL: uint32_t,
    pub PLLDIV: uint32_t,
}
impl ::core::default::Default for RCC_PLLInitTypeDef {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct RCC_OscInitTypeDef {
    pub OscillatorType: uint32_t,
    pub HSEState: uint32_t,
    pub LSEState: uint32_t,
    pub HSIState: uint32_t,
    pub HSICalibrationValue: uint32_t,
    pub LSIState: uint32_t,
    pub MSIState: uint32_t,
    pub MSICalibrationValue: uint32_t,
    pub MSIClockRange: uint32_t,
    pub PLL: RCC_PLLInitTypeDef,
}
impl ::core::default::Default for RCC_OscInitTypeDef {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct RCC_ClkInitTypeDef {
    pub ClockType: uint32_t,
    pub SYSCLKSource: uint32_t,
    pub AHBCLKDivider: uint32_t,
    pub APB1CLKDivider: uint32_t,
    pub APB2CLKDivider: uint32_t,
}
impl ::core::default::Default for RCC_ClkInitTypeDef {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct RCC_PeriphCLKInitTypeDef {
    pub PeriphClockSelection: uint32_t,
    pub RTCClockSelection: uint32_t,
    pub LCDClockSelection: uint32_t,
}
impl ::core::default::Default for RCC_PeriphCLKInitTypeDef {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct GPIO_InitTypeDef {
    pub Pin: uint32_t,
    pub Mode: uint32_t,
    pub Pull: uint32_t,
    pub Speed: uint32_t,
    pub Alternate: uint32_t,
}
impl ::core::default::Default for GPIO_InitTypeDef {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum GPIO_PinState { GPIO_PIN_RESET = 0, GPIO_PIN_SET = 1, }
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct MPU_Region_InitTypeDef {
    pub Enable: uint8_t,
    pub Number: uint8_t,
    pub BaseAddress: uint32_t,
    pub Size: uint8_t,
    pub SubRegionDisable: uint8_t,
    pub TypeExtField: uint8_t,
    pub AccessPermission: uint8_t,
    pub DisableExec: uint8_t,
    pub IsShareable: uint8_t,
    pub IsCacheable: uint8_t,
    pub IsBufferable: uint8_t,
}
impl ::core::default::Default for MPU_Region_InitTypeDef {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum FLASH_ProcedureTypeDef {
    FLASH_PROC_NONE = 0,
    FLASH_PROC_PAGEERASE = 1,
    FLASH_PROC_PROGRAM = 2,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct FLASH_ProcessTypeDef {
    pub ProcedureOnGoing: FLASH_ProcedureTypeDef,
    pub NbPagesToErase: uint32_t,
    pub Address: uint32_t,
    pub Page: uint32_t,
    pub Lock: HAL_LockTypeDef,
    pub ErrorCode: uint32_t,
}
impl ::core::default::Default for FLASH_ProcessTypeDef {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct FLASH_EraseInitTypeDef {
    pub TypeErase: uint32_t,
    pub PageAddress: uint32_t,
    pub NbPages: uint32_t,
}
impl ::core::default::Default for FLASH_EraseInitTypeDef {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct FLASH_OBProgramInitTypeDef {
    pub OptionType: uint32_t,
    pub WRPState: uint32_t,
    pub WRPSector0To31: uint32_t,
    pub RDPLevel: uint8_t,
    pub BORLevel: uint8_t,
    pub USERConfig: uint8_t,
    _bindgen_padding_0_: [u8; 1usize],
}
impl ::core::default::Default for FLASH_OBProgramInitTypeDef {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct FLASH_AdvOBProgramInitTypeDef {
    pub OptionType: uint32_t,
}
impl ::core::default::Default for FLASH_AdvOBProgramInitTypeDef {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PWR_PVDTypeDef {
    pub PVDLevel: uint32_t,
    pub Mode: uint32_t,
}
impl ::core::default::Default for PWR_PVDTypeDef {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
extern "C" {
    pub static mut ITM_RxBuffer: int32_t;
    pub static mut SystemCoreClock: uint32_t;
    pub static mut AHBPrescTable: [uint8_t; 16usize];
    pub static mut APBPrescTable: [uint8_t; 8usize];
    pub static mut PLLMulTable: [uint8_t; 9usize];
    pub static mut _impure_ptr: *mut _reent;
    pub static _global_impure_ptr: *mut _reent;
}
extern "C" {
    pub fn SystemInit();
    pub fn SystemCoreClockUpdate();
    pub fn _reclaim_reent(arg1: *mut _reent);
    pub fn tmpfile() -> *mut FILE;
    pub fn tmpnam(arg1: *mut uint8_t)
     -> *mut uint8_t;
    pub fn fclose(arg1: *mut FILE) -> int32_t;
    pub fn fflush(arg1: *mut FILE) -> int32_t;
    pub fn freopen(arg1: *const uint8_t,
                   arg2: *const uint8_t, arg3: *mut FILE)
     -> *mut FILE;
    pub fn setbuf(arg1: *mut FILE, arg2: *mut uint8_t);
    pub fn setvbuf(arg1: *mut FILE, arg2: *mut uint8_t,
                   arg3: int32_t, arg4: size_t)
     -> int32_t;
    pub fn fprintf(arg1: *mut FILE, arg2: *const uint8_t, ...)
     -> int32_t;
    pub fn fscanf(arg1: *mut FILE, arg2: *const uint8_t, ...)
     -> int32_t;
    pub fn printf(arg1: *const uint8_t, ...)
     -> int32_t;
    pub fn scanf(arg1: *const uint8_t, ...)
     -> int32_t;
    pub fn sscanf(arg1: *const uint8_t,
                  arg2: *const uint8_t, ...)
     -> int32_t;
    pub fn fgetc(arg1: *mut FILE) -> int32_t;
    pub fn fgets(arg1: *mut uint8_t,
                 arg2: int32_t, arg3: *mut FILE)
     -> *mut uint8_t;
    pub fn fputc(arg1: int32_t, arg2: *mut FILE)
     -> int32_t;
    pub fn fputs(arg1: *const uint8_t, arg2: *mut FILE)
     -> int32_t;
    pub fn getc(arg1: *mut FILE) -> int32_t;
    pub fn getchar() -> int32_t;
    pub fn gets(arg1: *mut uint8_t)
     -> *mut uint8_t;
    pub fn putc(arg1: int32_t, arg2: *mut FILE)
     -> int32_t;
    pub fn putchar(arg1: int32_t) -> int32_t;
    pub fn puts(arg1: *const uint8_t)
     -> int32_t;
    pub fn ungetc(arg1: int32_t, arg2: *mut FILE)
     -> int32_t;
    pub fn fread(arg1: *mut c_void, _size: size_t, _n: size_t,
                 arg2: *mut FILE) -> size_t;
    pub fn fwrite(arg1: *const c_void, _size: size_t,
                  _n: size_t, arg2: *mut FILE) -> size_t;
    pub fn fgetpos(arg1: *mut FILE, arg2: *mut fpos_t)
     -> int32_t;
    pub fn fseek(arg1: *mut FILE, arg2: int32_t,
                 arg3: int32_t) -> int32_t;
    pub fn fsetpos(arg1: *mut FILE, arg2: *const fpos_t)
     -> int32_t;
    pub fn ftell(arg1: *mut FILE) -> int32_t;
    pub fn rewind(arg1: *mut FILE);
    pub fn clearerr(arg1: *mut FILE);
    pub fn feof(arg1: *mut FILE) -> int32_t;
    pub fn ferror(arg1: *mut FILE) -> int32_t;
    pub fn perror(arg1: *const uint8_t);
    pub fn fopen(_name: *const uint8_t,
                 _type: *const uint8_t) -> *mut FILE;
    pub fn sprintf(arg1: *mut uint8_t,
                   arg2: *const uint8_t, ...)
     -> int32_t;
    pub fn remove(arg1: *const uint8_t)
     -> int32_t;
    pub fn rename(arg1: *const uint8_t,
                  arg2: *const uint8_t)
     -> int32_t;
    pub fn snprintf(arg1: *mut uint8_t, arg2: size_t,
                    arg3: *const uint8_t, ...)
     -> int32_t;
    pub fn _asiprintf_r(arg1: *mut _reent,
                        arg2: *mut *mut uint8_t,
                        arg3: *const uint8_t, ...)
     -> int32_t;
    pub fn _asniprintf_r(arg1: *mut _reent,
                         arg2: *mut uint8_t,
                         arg3: *mut size_t,
                         arg4: *const uint8_t, ...)
     -> *mut uint8_t;
    pub fn _asnprintf_r(arg1: *mut _reent, arg2: *mut uint8_t,
                        arg3: *mut size_t,
                        arg4: *const uint8_t, ...)
     -> *mut uint8_t;
    pub fn _asprintf_r(arg1: *mut _reent,
                       arg2: *mut *mut uint8_t,
                       arg3: *const uint8_t, ...)
     -> int32_t;
    pub fn _diprintf_r(arg1: *mut _reent, arg2: int32_t,
                       arg3: *const uint8_t, ...)
     -> int32_t;
    pub fn _dprintf_r(arg1: *mut _reent, arg2: int32_t,
                      arg3: *const uint8_t, ...)
     -> int32_t;
    pub fn _fclose_r(arg1: *mut _reent, arg2: *mut FILE)
     -> int32_t;
    pub fn _fcloseall_r(arg1: *mut _reent) -> int32_t;
    pub fn _fdopen_r(arg1: *mut _reent, arg2: int32_t,
                     arg3: *const uint8_t) -> *mut FILE;
    pub fn _fflush_r(arg1: *mut _reent, arg2: *mut FILE)
     -> int32_t;
    pub fn _fgetc_r(arg1: *mut _reent, arg2: *mut FILE)
     -> int32_t;
    pub fn _fgetc_unlocked_r(arg1: *mut _reent, arg2: *mut FILE)
     -> int32_t;
    pub fn _fgets_r(arg1: *mut _reent, arg2: *mut uint8_t,
                    arg3: int32_t, arg4: *mut FILE)
     -> *mut uint8_t;
    pub fn _fgets_unlocked_r(arg1: *mut _reent,
                             arg2: *mut uint8_t,
                             arg3: int32_t, arg4: *mut FILE)
     -> *mut uint8_t;
    pub fn _fgetpos_r(arg1: *mut _reent, arg2: *mut FILE, arg3: *mut fpos_t)
     -> int32_t;
    pub fn _fsetpos_r(arg1: *mut _reent, arg2: *mut FILE, arg3: *const fpos_t)
     -> int32_t;
    pub fn _fiprintf_r(arg1: *mut _reent, arg2: *mut FILE,
                       arg3: *const uint8_t, ...)
     -> int32_t;
    pub fn _fiscanf_r(arg1: *mut _reent, arg2: *mut FILE,
                      arg3: *const uint8_t, ...)
     -> int32_t;
    pub fn _fmemopen_r(arg1: *mut _reent, arg2: *mut c_void,
                       arg3: size_t, arg4: *const uint8_t)
     -> *mut FILE;
    pub fn _fopen_r(arg1: *mut _reent, arg2: *const uint8_t,
                    arg3: *const uint8_t) -> *mut FILE;
    pub fn _freopen_r(arg1: *mut _reent, arg2: *const uint8_t,
                      arg3: *const uint8_t, arg4: *mut FILE)
     -> *mut FILE;
    pub fn _fprintf_r(arg1: *mut _reent, arg2: *mut FILE,
                      arg3: *const uint8_t, ...)
     -> int32_t;
    pub fn _fpurge_r(arg1: *mut _reent, arg2: *mut FILE)
     -> int32_t;
    pub fn _fputc_r(arg1: *mut _reent, arg2: int32_t,
                    arg3: *mut FILE) -> int32_t;
    pub fn _fputc_unlocked_r(arg1: *mut _reent, arg2: int32_t,
                             arg3: *mut FILE) -> int32_t;
    pub fn _fputs_r(arg1: *mut _reent, arg2: *const uint8_t,
                    arg3: *mut FILE) -> int32_t;
    pub fn _fputs_unlocked_r(arg1: *mut _reent,
                             arg2: *const uint8_t,
                             arg3: *mut FILE) -> int32_t;
    pub fn _fread_r(arg1: *mut _reent, arg2: *mut c_void,
                    _size: size_t, _n: size_t, arg3: *mut FILE) -> size_t;
    pub fn _fread_unlocked_r(arg1: *mut _reent,
                             arg2: *mut c_void, _size: size_t,
                             _n: size_t, arg3: *mut FILE) -> size_t;
    pub fn _fscanf_r(arg1: *mut _reent, arg2: *mut FILE,
                     arg3: *const uint8_t, ...)
     -> int32_t;
    pub fn _fseek_r(arg1: *mut _reent, arg2: *mut FILE,
                    arg3: int32_t, arg4: int32_t)
     -> int32_t;
    pub fn _fseeko_r(arg1: *mut _reent, arg2: *mut FILE, arg3: _off_t,
                     arg4: int32_t) -> int32_t;
    pub fn _ftell_r(arg1: *mut _reent, arg2: *mut FILE)
     -> int32_t;
    pub fn _ftello_r(arg1: *mut _reent, arg2: *mut FILE) -> _off_t;
    pub fn _rewind_r(arg1: *mut _reent, arg2: *mut FILE);
    pub fn _fwrite_r(arg1: *mut _reent, arg2: *const c_void,
                     _size: size_t, _n: size_t, arg3: *mut FILE) -> size_t;
    pub fn _fwrite_unlocked_r(arg1: *mut _reent,
                              arg2: *const c_void,
                              _size: size_t, _n: size_t, arg3: *mut FILE)
     -> size_t;
    pub fn _getc_r(arg1: *mut _reent, arg2: *mut FILE)
     -> int32_t;
    pub fn _getc_unlocked_r(arg1: *mut _reent, arg2: *mut FILE)
     -> int32_t;
    pub fn _getchar_r(arg1: *mut _reent) -> int32_t;
    pub fn _getchar_unlocked_r(arg1: *mut _reent) -> int32_t;
    pub fn _gets_r(arg1: *mut _reent, arg2: *mut uint8_t)
     -> *mut uint8_t;
    pub fn _iprintf_r(arg1: *mut _reent,
                      arg2: *const uint8_t, ...)
     -> int32_t;
    pub fn _iscanf_r(arg1: *mut _reent,
                     arg2: *const uint8_t, ...)
     -> int32_t;
    pub fn _open_memstream_r(arg1: *mut _reent,
                             arg2: *mut *mut uint8_t,
                             arg3: *mut size_t) -> *mut FILE;
    pub fn _perror_r(arg1: *mut _reent, arg2: *const uint8_t);
    pub fn _printf_r(arg1: *mut _reent,
                     arg2: *const uint8_t, ...)
     -> int32_t;
    pub fn _putc_r(arg1: *mut _reent, arg2: int32_t,
                   arg3: *mut FILE) -> int32_t;
    pub fn _putc_unlocked_r(arg1: *mut _reent, arg2: int32_t,
                            arg3: *mut FILE) -> int32_t;
    pub fn _putchar_unlocked_r(arg1: *mut _reent, arg2: int32_t)
     -> int32_t;
    pub fn _putchar_r(arg1: *mut _reent, arg2: int32_t)
     -> int32_t;
    pub fn _puts_r(arg1: *mut _reent, arg2: *const uint8_t)
     -> int32_t;
    pub fn _remove_r(arg1: *mut _reent, arg2: *const uint8_t)
     -> int32_t;
    pub fn _rename_r(arg1: *mut _reent, _old: *const uint8_t,
                     _new: *const uint8_t)
     -> int32_t;
    pub fn _scanf_r(arg1: *mut _reent,
                    arg2: *const uint8_t, ...)
     -> int32_t;
    pub fn _siprintf_r(arg1: *mut _reent, arg2: *mut uint8_t,
                       arg3: *const uint8_t, ...)
     -> int32_t;
    pub fn _siscanf_r(arg1: *mut _reent, arg2: *const uint8_t,
                      arg3: *const uint8_t, ...)
     -> int32_t;
    pub fn _sniprintf_r(arg1: *mut _reent, arg2: *mut uint8_t,
                        arg3: size_t,
                        arg4: *const uint8_t, ...)
     -> int32_t;
    pub fn _snprintf_r(arg1: *mut _reent, arg2: *mut uint8_t,
                       arg3: size_t,
                       arg4: *const uint8_t, ...)
     -> int32_t;
    pub fn _sprintf_r(arg1: *mut _reent, arg2: *mut uint8_t,
                      arg3: *const uint8_t, ...)
     -> int32_t;
    pub fn _sscanf_r(arg1: *mut _reent, arg2: *const uint8_t,
                     arg3: *const uint8_t, ...)
     -> int32_t;
    pub fn _tempnam_r(arg1: *mut _reent, arg2: *const uint8_t,
                      arg3: *const uint8_t)
     -> *mut uint8_t;
    pub fn _tmpfile_r(arg1: *mut _reent) -> *mut FILE;
    pub fn _tmpnam_r(arg1: *mut _reent, arg2: *mut uint8_t)
     -> *mut uint8_t;
    pub fn _ungetc_r(arg1: *mut _reent, arg2: int32_t,
                     arg3: *mut FILE) -> int32_t;
    
    pub fn fpurge(arg1: *mut FILE) -> int32_t;
    pub fn __getdelim(arg1: *mut *mut uint8_t,
                      arg2: *mut size_t, arg3: int32_t,
                      arg4: *mut FILE) -> ssize_t;
    pub fn __getline(arg1: *mut *mut uint8_t,
                     arg2: *mut size_t, arg3: *mut FILE) -> ssize_t;
    pub fn __srget_r(arg1: *mut _reent, arg2: *mut FILE)
     -> int32_t;
    pub fn __swbuf_r(arg1: *mut _reent, arg2: int32_t,
                     arg3: *mut FILE) -> int32_t;
    pub fn HAL_RCCEx_PeriphCLKConfig(PeriphClkInit:
                                         *mut RCC_PeriphCLKInitTypeDef)
     -> HAL_StatusTypeDef;
    pub fn HAL_RCCEx_GetPeriphCLKConfig(PeriphClkInit:
                                            *mut RCC_PeriphCLKInitTypeDef);
    pub fn HAL_RCCEx_GetPeriphCLKFreq(PeriphClk: uint32_t) -> uint32_t;
    pub fn HAL_RCC_DeInit();
    pub fn HAL_RCC_OscConfig(RCC_OscInitStruct: *mut RCC_OscInitTypeDef)
     -> HAL_StatusTypeDef;
    pub fn HAL_RCC_ClockConfig(RCC_ClkInitStruct: *mut RCC_ClkInitTypeDef,
                               FLatency: uint32_t) -> HAL_StatusTypeDef;
    pub fn HAL_RCC_MCOConfig(RCC_MCOx: uint32_t, RCC_MCOSource: uint32_t,
                             RCC_MCODiv: uint32_t);
    pub fn HAL_RCC_EnableCSS();
    pub fn HAL_RCC_DisableCSS();
    pub fn HAL_RCC_GetSysClockFreq() -> uint32_t;
    pub fn HAL_RCC_GetHCLKFreq() -> uint32_t;
    pub fn HAL_RCC_GetPCLK1Freq() -> uint32_t;
    pub fn HAL_RCC_GetPCLK2Freq() -> uint32_t;
    pub fn HAL_RCC_GetOscConfig(RCC_OscInitStruct: *mut RCC_OscInitTypeDef);
    pub fn HAL_RCC_GetClockConfig(RCC_ClkInitStruct: *mut RCC_ClkInitTypeDef,
                                  pFLatency: *mut uint32_t);
    pub fn HAL_RCC_NMI_IRQHandler();
    pub fn HAL_RCC_CSSCallback();
    pub fn HAL_GPIO_Init(GPIOx: *mut GPIO_TypeDef,
                         GPIO_Init: *mut GPIO_InitTypeDef);
    pub fn HAL_GPIO_DeInit(GPIOx: *mut GPIO_TypeDef, GPIO_Pin: uint32_t);
    pub fn HAL_GPIO_ReadPin(GPIOx: *mut GPIO_TypeDef, GPIO_Pin: uint16_t)
     -> GPIO_PinState;
    pub fn HAL_GPIO_WritePin(GPIOx: *mut GPIO_TypeDef, GPIO_Pin: uint16_t,
                             PinState: GPIO_PinState);
    pub fn HAL_GPIO_TogglePin(GPIOx: *mut GPIO_TypeDef, GPIO_Pin: uint16_t);
    pub fn HAL_GPIO_LockPin(GPIOx: *mut GPIO_TypeDef, GPIO_Pin: uint16_t)
     -> HAL_StatusTypeDef;
    pub fn HAL_GPIO_EXTI_IRQHandler(GPIO_Pin: uint16_t);
    pub fn HAL_GPIO_EXTI_Callback(GPIO_Pin: uint16_t);
    pub fn HAL_NVIC_SetPriorityGrouping(PriorityGroup: uint32_t);
    pub fn HAL_NVIC_SetPriority(IRQn: IRQn_Type, PreemptPriority: uint32_t,
                                SubPriority: uint32_t);
    pub fn HAL_NVIC_EnableIRQ(IRQn: IRQn_Type);
    pub fn HAL_NVIC_DisableIRQ(IRQn: IRQn_Type);
    pub fn HAL_NVIC_SystemReset();
    pub fn HAL_SYSTICK_Config(TicksNumb: uint32_t) -> uint32_t;
    pub fn HAL_MPU_ConfigRegion(MPU_Init: *mut MPU_Region_InitTypeDef);
    pub fn HAL_NVIC_GetPriorityGrouping() -> uint32_t;
    pub fn HAL_NVIC_GetPriority(IRQn: IRQn_Type, PriorityGroup: uint32_t,
                                pPreemptPriority: *mut uint32_t,
                                pSubPriority: *mut uint32_t);
    pub fn HAL_NVIC_GetPendingIRQ(IRQn: IRQn_Type) -> uint32_t;
    pub fn HAL_NVIC_SetPendingIRQ(IRQn: IRQn_Type);
    pub fn HAL_NVIC_ClearPendingIRQ(IRQn: IRQn_Type);
    pub fn HAL_NVIC_GetActive(IRQn: IRQn_Type) -> uint32_t;
    pub fn HAL_SYSTICK_CLKSourceConfig(CLKSource: uint32_t);
    pub fn HAL_SYSTICK_IRQHandler();
    pub fn HAL_SYSTICK_Callback();
    pub fn HAL_FLASHEx_Erase(pEraseInit: *mut FLASH_EraseInitTypeDef,
                             PageError: *mut uint32_t) -> HAL_StatusTypeDef;
    pub fn HAL_FLASHEx_Erase_IT(pEraseInit: *mut FLASH_EraseInitTypeDef)
     -> HAL_StatusTypeDef;
    pub fn HAL_FLASHEx_OBProgram(pOBInit: *mut FLASH_OBProgramInitTypeDef)
     -> HAL_StatusTypeDef;
    pub fn HAL_FLASHEx_OBGetConfig(pOBInit: *mut FLASH_OBProgramInitTypeDef);
    pub fn HAL_FLASHEx_DATAEEPROM_Unlock() -> HAL_StatusTypeDef;
    pub fn HAL_FLASHEx_DATAEEPROM_Lock() -> HAL_StatusTypeDef;
    pub fn HAL_FLASHEx_DATAEEPROM_Erase(TypeErase: uint32_t,
                                        Address: uint32_t)
     -> HAL_StatusTypeDef;
    pub fn HAL_FLASHEx_DATAEEPROM_Program(TypeProgram: uint32_t,
                                          Address: uint32_t, Data: uint32_t)
     -> HAL_StatusTypeDef;
    pub fn HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram();
    pub fn HAL_FLASHEx_DATAEEPROM_DisableFixedTimeProgram();
    pub fn HAL_FLASHEx_EnableRunPowerDown() -> HAL_StatusTypeDef;
    pub fn HAL_FLASHEx_DisableRunPowerDown() -> HAL_StatusTypeDef;
    pub fn HAL_FLASHEx_HalfPageProgram(Address: uint32_t,
                                       pBuffer: *mut uint32_t)
     -> HAL_StatusTypeDef;
    pub fn HAL_FLASHEx_DATAEEPROM_EraseDoubleWord(Address: uint32_t)
     -> HAL_StatusTypeDef;
    pub fn HAL_FLASHEx_DATAEEPROM_ProgramDoubleWord(Address: uint32_t,
                                                    Data: uint64_t)
     -> HAL_StatusTypeDef;
    pub fn HAL_FLASH_Program(TypeProgram: uint32_t, Address: uint32_t,
                             Data: uint64_t) -> HAL_StatusTypeDef;
    pub fn HAL_FLASH_Program_IT(TypeProgram: uint32_t, Address: uint32_t,
                                Data: uint64_t) -> HAL_StatusTypeDef;
    pub fn HAL_FLASH_IRQHandler();
    pub fn HAL_FLASH_EndOfOperationCallback(ReturnValue: uint32_t);
    pub fn HAL_FLASH_OperationErrorCallback(ReturnValue: uint32_t);
    pub fn HAL_FLASH_Unlock() -> HAL_StatusTypeDef;
    pub fn HAL_FLASH_Lock() -> HAL_StatusTypeDef;
    pub fn HAL_FLASH_OB_Unlock() -> HAL_StatusTypeDef;
    pub fn HAL_FLASH_OB_Lock() -> HAL_StatusTypeDef;
    pub fn HAL_FLASH_OB_Launch() -> HAL_StatusTypeDef;
    pub fn HAL_FLASH_GetError() -> uint32_t;
    pub fn FLASH_PageErase(PageAddress: uint32_t);
    pub fn FLASH_WaitForLastOperation(Timeout: uint32_t) -> HAL_StatusTypeDef;
    pub fn HAL_PWREx_GetVoltageRange() -> uint32_t;
    pub fn HAL_PWREx_EnableFastWakeUp();
    pub fn HAL_PWREx_DisableFastWakeUp();
    pub fn HAL_PWREx_EnableUltraLowPower();
    pub fn HAL_PWREx_DisableUltraLowPower();
    pub fn HAL_PWREx_EnableLowPowerRunMode();
    pub fn HAL_PWREx_DisableLowPowerRunMode();
    pub fn HAL_PWR_DeInit();
    pub fn HAL_PWR_EnableBkUpAccess();
    pub fn HAL_PWR_DisableBkUpAccess();
    pub fn HAL_PWR_ConfigPVD(sConfigPVD: *mut PWR_PVDTypeDef);
    pub fn HAL_PWR_EnablePVD();
    pub fn HAL_PWR_DisablePVD();
    pub fn HAL_PWR_EnableWakeUpPin(WakeUpPinx: uint32_t);
    pub fn HAL_PWR_DisableWakeUpPin(WakeUpPinx: uint32_t);
    pub fn HAL_PWR_EnterSTOPMode(Regulator: uint32_t, STOPEntry: uint8_t);
    pub fn HAL_PWR_EnterSLEEPMode(Regulator: uint32_t, SLEEPEntry: uint8_t);
    pub fn HAL_PWR_EnterSTANDBYMode();
    pub fn HAL_PWR_EnableSleepOnExit();
    pub fn HAL_PWR_DisableSleepOnExit();
    pub fn HAL_PWR_EnableSEVOnPend();
    pub fn HAL_PWR_DisableSEVOnPend();
    pub fn HAL_PWR_PVD_IRQHandler();
    pub fn HAL_PWR_PVDCallback();
    pub fn HAL_Init() -> HAL_StatusTypeDef;
    pub fn HAL_DeInit() -> HAL_StatusTypeDef;
    pub fn HAL_MspInit();
    pub fn HAL_MspDeInit();
    pub fn HAL_InitTick(TickPriority: uint32_t) -> HAL_StatusTypeDef;
    pub fn HAL_IncTick();
    pub fn HAL_Delay(Delay: uint32_t);
    pub fn HAL_GetTick() -> uint32_t;
    pub fn HAL_SuspendTick();
    pub fn HAL_ResumeTick();
    pub fn HAL_GetHalVersion() -> uint32_t;
    pub fn HAL_GetREVID() -> uint32_t;
    pub fn HAL_GetDEVID() -> uint32_t;
    pub fn HAL_DBGMCU_EnableDBGSleepMode();
    pub fn HAL_DBGMCU_DisableDBGSleepMode();
    pub fn HAL_DBGMCU_EnableDBGStopMode();
    pub fn HAL_DBGMCU_DisableDBGStopMode();
    pub fn HAL_DBGMCU_EnableDBGStandbyMode();
    pub fn HAL_DBGMCU_DisableDBGStandbyMode();
}
